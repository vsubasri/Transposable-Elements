import pandas as pd
import os

data = config["run"]["data"]
project = config["run"]["project"]
#samples = pd.read_table(config["run"]["samples"]).set_index("sample", drop=False)
sample_list = pd.read_table(config["run"]["samples"])['sample'].tolist()

# Debug print statement
print(f"Data directory: {data}")
print(f"Project name: {project}")
for sample in sample_list:
    print(f"Sample name: {sample}")
    print(f"Expected Preprocess output path: {data}/logs/{project}/{sample}_preprocess.log")


## Target Rule ---
rule all:
    input: 
        expand("{data}/{project}/IndivAnalysis_out/{sample}_indiv_analysis_done.txt", data=data, project=project, sample=sample_list),
	expand("{data}/{project}/snpeff_out/{project}_MELT_snpeff.vcf", project=project, data=data)



rule Preprocess:
    input:
        bam = "{data}/{project}/{sample}.bam"
    output:
        disc = temp("{data}/{project}/{sample}.bam.disc"),
        bai = temp("{data}/{project}/{sample}.bam.disc.bai"),
        fq = temp("{data}/{project}/{sample}.bam.fq"),
        completion_marker_preprocess = temp("{data}/{project}/{sample}_preprocess_done.txt")
    params:
        melt = config["run"]["MELT"],
        genome_ref = config["run"]["genome_ref"]
    log:
        preprocess_log = "{data}/logs/{project}/{sample}_preprocess.log"
    conda:
        "envs/melt.yaml"
    shell:
        '''
        echo "Processing BAM file: {input.bam}"
        echo "Log file: {log.preprocess_log}"
        java -jar {params.melt} Preprocess \
        -bamfile {input.bam} \
        -h {params.genome_ref} > {log.preprocess_log} 2>&1
       touch {output.completion_marker_preprocess}
        '''

rule IndivAnalysis:
    input:
        bam = "{data}/{project}/{sample}.bam",
        disc = "{data}/{project}/{sample}.bam.disc",
        bai = "{data}/{project}/{sample}.bam.disc.bai",
        fq = "{data}/{project}/{sample}.bam.fq",
    output:
        completion_marker = temp("{data}/{project}/IndivAnalysis_out/{sample}_indiv_analysis_done.txt")

    params:
        melt = config["run"]["MELT"],
        genome_ref = config["run"]["genome_ref"],
        element_ref = config["run"]["element_ref"]
    log:
        indiv_analysis_log = "{data}/logs/{project}/{sample}_indiv_analysis.log"

    conda: 
        "envs/melt.yaml"
    shell:
        '''
        echo "Processing BAM file: {input.bam}"
        echo "Log file: {log.indiv_analysis_log}"
        java -jar {params.melt} IndivAnalysis \
	-b hs37d5/NC_007605 \
	-c 40 \
        -h {params.genome_ref} \
        -bamfile {input.bam}\
        -t {params.element_ref}\
        -w {data}/{wildcards.project}/IndivAnalysis_out/
	touch {output.completion_marker}
        '''

rule GroupAnalysis:
    input: 
       # completion_markers = expand("{data}/{project}/IndivAnalysis_out/{sample}_indiv_analysis_done.txt", sample=sample_list)
        completion_markers = lambda wildcards: expand("{data}/{project}/IndivAnalysis_out/{sample}_indiv_analysis_done.txt", data=data, project=project, sample=sample_list)

    output: 
        pre_geno_ALU = temp("{data}/{project}/GroupAnalysis_out/ALU.pre_geno.tsv"),
        pre_geno_LINE1 = temp("{data}/{project}/GroupAnalysis_out/LINE1.pre_geno.tsv"),
        pre_geno_SVA = temp("{data}/{project}/GroupAnalysis_out/SVA.pre_geno.tsv")
        
    params:
        melt = config["run"]["MELT"],
        genome_ref = config["run"]["genome_ref"],
        project = project,
        element_ref = config["run"]["element_ref"]
    conda: 
        "envs/melt.yaml"
    shell:
        '''
        java -jar {params.melt} GroupAnalysis \
        -h {params.genome_ref} \
        -n /hpf/largeprojects/davidm/resources/MELT_anno/hg19.genes.bed \
        -t {params.element_ref}\
        -discoverydir {input.indiv_dir} \
        -w {data}/{wildcards.project}/GroupAnalysis_out/ 
        '''
## Note: cannot add project name as prefix to output name as MELT "Genotype" step looks for specific output file name without any prefixes


rule Genotype:
    input: 
        pre_geno_ALU = "{data}/{project}/GroupAnalysis_out/ALU.pre_geno.tsv",
        pre_geno_LINE1 = "{data}/{project}/GroupAnalysis_out/LINE1.pre_geno.tsv",
        pre_geno_SVA = "{data}/{project}/GroupAnalysis_out/SVA.pre_geno.tsv",
        bam = "{data}/{project}/{sample}.bam"
    output: 
        genotype_tsv_ALU = temp("{data}/{project}/Genotype_out/{project}_{sample}.ALU.tsv"),
        genotype_tsv_LINE1 = temp("{data}/{project}/Genotype_out/{project}_{sample}.LINE1.tsv"),
        genotype_tsv_SVA = temp("{data}/{project}/Genotype_out/{project}_{sample}.SVA.tsv")
    params:
        melt = config["run"]["MELT"],
        genome_ref = config["run"]["genome_ref"],
        element_ref = config["run"]["element_ref"]
    conda: 
        "envs/melt.yaml"
    shell:
        '''
        java -jar {params.melt} Genotype \
        -bamfile {input.bam} \
        -h {params.genome_ref} \
        -t {params.element_ref}\
	    -p {data}/{wildcards.project}/GroupAnalysis_out/ \
        -w {data}/{wildcards.project}/Genotype_out/
        '''


rule MakeVCF:
    input: 
        pre_geno_ALU = "{data}/{project}/GroupAnalysis_out/ALU.pre_geno.tsv",
        pre_geno_LINE1 = "{data}/{project}/GroupAnalysis_out/LINE1.pre_geno.tsv",
        pre_geno_SVA = "{data}/{project}/GroupAnalysis_out/SVA.pre_geno.tsv",
        genotype_tsv_ALU = lambda wildcards: expand("{data}/{project}/Genotype_out/{project}_{sample}.ALU.tsv", project=project, data=data, sample=sample_list),
        genotype_tsv_LINE1 = lambda wildcards: expand("{data}/{project}/Genotype_out/{project}_{sample}.LINE1.tsv", project=project, data=data, sample=sample_list),
        genotype_tsv_SVA = lambda wildcards: expand("{data}/{project}/Genotype_out/{project}_{sample}.SVA.tsv", project=project, data=data, sample=sample_list)
    output: 
        VCF_ALU = temp("{data}/{project}/MakeVCF_out/{project}_ALU.final_comp.vcf.gz"),
        VCF_LINE1 = temp("{data}/{project}/MakeVCF_out/{project}_LINE1.final_comp.vcf.gz"),
        VCF_SVA = temp("{data}/{project}/MakeVCF_out/{project}_SVA.final_comp.vcf.gz")

    params:
        melt = config["run"]["MELT"],
        genome_ref = config["run"]["genome_ref"],
        project = project,
        element_ref = config["run"]["element_ref"]
    conda: 
        "envs/melt.yaml"
    shell:
        '''
        java -jar {params.melt} MakeVCF \
        -genotypingdir {data}/{wildcards.project}/Genotype_out/ \
        -p {data}/{wildcards.project}/GroupAnalysis_out/ \
        -h {params.genome_ref} \
        -t {params.element_ref}\
        -w {data}/{wildcards.project}/MakeVCF_out/ ; 

        for me in "ALU" "LINE1" "SVA"; do 
            mv "$me".final_comp.vcf {data}/{wildcards.project}/MakeVCF_out/{wildcards.project}_"$me".final_comp.vcf;
            mv {data}/{wildcards.project}/MakeVCF_out/"$me".hum.list data/{wildcards.project}/MakeVCF_out/{wildcards.project}_"$me".hum.list
        done;

        for file in {data}/{wildcards.project}/MakeVCF_out/*vcf; do
            bgzip $file; tabix $file.gz; 
        done
        '''


rule MergeVCFs:
    input: 
        VCF_ALU = "{data}/{project}/MakeVCF_out/{project}_ALU.final_comp.vcf.gz",
        VCF_LINE1 = "{data}/{project}/MakeVCF_out/{project}_LINE1.final_comp.vcf.gz",
        VCF_SVA = "{data}/{project}/MakeVCF_out/{project}_SVA.final_comp.vcf.gz"

    output:
        merged_VCF = temp("{data}/{project}/MakeVCF_out/{project}_MELT.vcf.gz"),
        index = temp("{data}/{project}/MakeVCF_out/{project}_MELT.vcf.gz.tbi")

    params:
        project = project
    conda: 
        "envs/melt.yaml"
    shell:
        '''
        bcftools concat -a -Oz  -o {data}/{wildcards.project}/MakeVCF_out/{wildcards.project}_MELT.vcf.gz {input.VCF_ALU} {input.VCF_LINE1} {input.VCF_SVA};
        tabix {data}/{wildcards.project}/MakeVCF_out/{wildcards.project}_MELT.vcf.gz;
        '''


rule FilterVCF:
    input: 
        merged_VCF = "{data}/{project}/MakeVCF_out/{project}_MELT.vcf.gz",
        index = "{data}/{project}/MakeVCF_out/{project}_MELT.vcf.gz.tbi"

    output:
        filtered_VCF = temp("{data}/{project}/MakeVCF_out/{project}_MELT_no_ac0.vcf.gz")
    params:
        project = project
    conda: 
        "envs/melt.yaml"
    shell:
        '''
        bcftools filter -i 'FILTER!="ac0"' {input.merged_VCF} -Oz -o {data}/{wildcards.project}/MakeVCF_out/{wildcards.project}_MELT_no_ac0.vcf.gz
        '''


rule ReplaceSymbAllele:
    input: 
        filtered_VCF = "{data}/{project}/MakeVCF_out/{project}_MELT_no_ac0.vcf.gz"
    output: 
        noSymbAllele = temp("{data}/{project}/MakeVCF_out/{project}_MELT_no_symb_allele.vcf.gz")
    params:
        project = project
    conda: 
        "envs/melt.yaml"
    shell:
        '''
        PREFIX=`echo {input.filtered_VCF} | sed 's/no_ac0.vcf.gz//'`;

        zcat {input.filtered_VCF} | sed 's/<INS:ME:ALU>/N/g' | sed 's/<INS:ME:LINE1>/N/g' | sed 's/<INS:ME:SVA>/N/g' > "$PREFIX"no_symb_allele.vcf;
        bgzip "$PREFIX"no_symb_allele.vcf;
        '''


rule snpeff:
    input: 
        noSymbAllele = "{data}/{project}/MakeVCF_out/{project}_MELT_no_symb_allele.vcf.gz"
    output: 
        snpeff_VCF = "{data}/{project}/snpeff_out/{project}_MELT_snpeff.vcf" 
    params:
        project = project,
        snpeff = config["run"]["snpeff"],
        snpeff_data = config["run"]["snpeff_data"]
    conda: 
        "envs/melt.yaml"
    shell:
        '''
        PREFIX=$(echo {input.noSymbAllele} | sed 's/MakeVCF_out/snpeff_out/' | sed 's/no_symb_allele.vcf.gz//')

        {params.snpeff} \
            -v \
            -Xms750m -Xmx20g  \
            -i vcf -o vcf \
            -{data}Dir {params.snpeff_data} \
            GRCh37.75 \
            -s "{data}/{project}/snpeff_out/snpEff_summary.html" \
            {input.noSymbAllele} > "$PREFIX"snpeff.vcf
        '''

rule MELT_report:
    input: 
        snpeff_VCF = "{data}/{project}/snpeff_out/{project}_MELT_snpeff.vcf" 
    output: 
        report = "{data}/{project}/report_out/{project}_MELT_report.csv" 
    params:
        project = project,
        protein_coding_genes = config["run"]["protein_coding_genes"],
        exon_bed = config["run"]["exon_bed"],
        #exac = config["run"]["exac"],
        omim = config["run"]["omim"],
        gnomad = config["run"]["gnomad"],
        biomart = config["run"]["biomart"],
        hpo = config["run"]["hpo_dir"] + project + "_HPO.txt", ###########??
        sv_counts = config["run"]["sv_counts"]

    conda: 
        "envs/melt.yaml"

    script:
        "scripts/MELT_report.py"
